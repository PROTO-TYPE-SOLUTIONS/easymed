services:
    postgres:
        image: postgres:15
        container_name: postgres
        environment:
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - POSTGRES_DB=${POSTGRES_DB}
            - POSTGRES_HOST=${POSTGRES_HOST}
        ports:
        - "5433:5432"
        volumes:
        - postgres_data:/var/lib/postgresql/data
        networks:
        - mks
    redis:
        image: redis:7.0-alpine
        container_name: redis
        command: redis-server --appendonly yes --replica-read-only no
        volumes:
            - ./volumes/redis/:/etc/redis/
        ports:
            - 6379:6379
        networks:
            - mks
        restart: unless-stopped

    backend:
        build:
            context: ./backend
            dockerfile: ./Dockerfile.local
        container_name: api
        # command: uvicorn --host 0.0.0.0 --port 8080 easymed.asgi:application
        command: python manage.py runserver 0.0.0.0:8080
        volumes:
            - ./backend:/app
        ports:
            - 8080:8080
        env_file:
            - ./.env
        restart: unless-stopped
        networks:
            - mks

    worker:
        build: ./backend
        container_name: "celery"
        restart: unless-stopped
        env_file:
            - ./.env    
        command: celery -A easymed worker --loglevel=INFO
        depends_on:
            - redis
        networks:
            - mks   
    
    celery-beat:
        build: ./backend
        container_name: celery-beat
        command: celery -A easymed beat --loglevel=INFO --scheduler django_celery_beat.schedulers:DatabaseScheduler
        env_file:
            - ./.env
        restart: unless-stopped
        depends_on:
            - redis
        networks:
            - mks    

    frontend:
        build:
            context: ./front-end
            dockerfile: ./Dockerfile.local
        container_name: easymed-frontend
        restart: unless-stopped
        ports:
            - 3000:3000
        depends_on:
            - backend 
        networks:
            - mks    

volumes:
    postgres_data:

networks:
    mks:
        name: mks
        driver: bridge
